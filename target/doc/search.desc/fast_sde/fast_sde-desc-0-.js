searchState.loadedDescShard("fast_sde", 0, "Random Number Generation for Monte Carlo Simulations\nAnalytical Black-Scholes formulas for European options and …\nBlack-Scholes Delta (∂V/∂S) for European call\nBlack-Scholes Gamma (∂²V/∂S²) for European call\nBlack-Scholes European call option price\nBlack-Scholes Rho (∂V/∂r) for European call\nBlack-Scholes Theta (∂V/∂t) for European call\nBlack-Scholes Vega (∂V/∂σ) for European call\nBlack-Scholes European put option price\nCalibration error\nContains the error value\nFeller condition violation in Heston model\nInvalid configuration\nInvalid parameter values\nMonte Carlo simulation error\nNumerical instability or convergence failure\nContains the success value\nPayoff calculation error\nRNG or random number generation error\nCustom error types for the fast-sde library\nResult type alias for fast-sde operations\nUnsupported operation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidation utilities\nValidate correlation parameter\nValidate that a value is finite and not NaN\nValidate that a parameter is non-negative\nValidate paths count\nValidate that a parameter is positive\nValidate that a parameter is within a range\nValidate steps count\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOption Payoff Functions\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nMonte Carlo Delta calculation using pathwise derivative …\nMonte Carlo Gamma calculation using central finite …\nEfficient batched Gamma calculation with common random …\nMonte Carlo pricing for options under Geometric Brownian …\nMonte Carlo Rho calculation using pathwise derivative …\nMonte Carlo Vega calculation using pathwise derivative …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nValidate the Monte Carlo configuration\nAsian call option: max(Avg(S_t) - K, 0)\nUp-and-out barrier call: max(S_T - K, 0) if max(S_t) &lt; H, …\nUp-and-out barrier put: max(K - S_T, 0) if max(S_t) &lt; H, …\nEuropean call option: max(S_T - K, 0)\nEuropean put option: max(K - S_T, 0)\nEnumeration of supported option payoff types\nCalculate payoff value from a simulated asset price path\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHeston Stochastic Volatility Model Implementation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet current scheme name for reporting\nTwo-factor step: updates both stock price and variance\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCounter-based RNG for reproducible parallel simulations\nRNG factory for reproducible parallel simulations\nCreate a counter RNG for a specific path/thread\nCreate a standard RNG for a specific path/thread (backward …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEuler-Maruyama Scheme for SDE Integration\nMilstein Scheme for Higher-Order SDE Integration\nStochastic Runge-Kutta (SRK) Scheme for SDE Integration\nEuler-Maruyama numerical scheme for SDE integration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSingle Euler-Maruyama step\nMilstein numerical scheme for SDE integration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSingle Milstein step with Itô correction\nStochastic Runge-Kutta numerical scheme\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSingle SRK step using predictor-corrector method")